<Project>
  <PropertyGroup>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <!-- Don't run analyzers during Visual Studio build, not to slow down development. They still run during dotnet
         build. By making this conditional, it won't overwrite the value if you set it in the Directory.Build.props
         file. For Rider users: https://youtrack.jetbrains.com/issue/RIDER-80579 -->
    <RunAnalyzersDuringBuild Condition="'$(RunAnalyzersDuringBuild)' != 'true'">false</RunAnalyzersDuringBuild>
    <!-- Needed for project targeting versions earlier than .NET 5. Only works with .NET Core and later projects, see:
    https://docs.microsoft.com/en-us/dotnet/core/project-sdk/overview.
    Note that this is not needed if the Microsoft.CodeAnalysis.NetAnalyzers NuGet package is installed. -->
    <!-- <EnableNETAnalyzers>true</EnableNETAnalyzers> -->
    <!-- Strict mode for the C# compiler, see: https://www.meziantou.net/csharp-compiler-strict-mode.htm. -->
    <Features>strict</Features>
    <!-- Useful to set here since the language version affects which analyzers to use and how to configure them. -->
    <LangVersion>12.0</LangVersion>
    <!-- Setting the analysis level explicitly lets us opt in to new analyzers with SDK upgrades. See:
    https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview#latest-updates -->
    <AnalysisLevel>8.0</AnalysisLevel>
    <!-- This is for Microsoft.CodeAnalysis.NetAnalyzers. This way, we have control over it unlike when getting it
         via the .NET SDK. See:
         https://docs.microsoft.com/en-us/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers .NET
         code style analysis is not working with .NET 5 though, see:
         https://github.com/dotnet/roslyn/issues/33558#issuecomment-867346974. -->
    <AnalysisMode>AllEnabledByDefault</AnalysisMode>
    <!-- This prevents unnecessary warnings so the analyzer versions will depend on the repository and not what is
         installed by the user. See:
         https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#_skipupgradenetanalyzersnugetwarning. -->
    <_SkipUpgradeNetAnalyzersNuGetWarning>true</_SkipUpgradeNetAnalyzersNuGetWarning>
  </PropertyGroup>

  <ItemGroup>
    <GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)Lombiq.Analyzers.globalconfig" />
  </ItemGroup>

  <Import Project="$(MSBuildThisFileDirectory)AnalyzerPackages.props" />

  <ItemGroup>
    <!-- Note: This is fixed as of SDK version 6.0.202. If you need to build the solution on a system with an older SDK
         version, please uncomment the PackageReferences below. Leave this commented out unless you are certain you need
         it, because it is a risky workaround as it makes us use the compiler from NuGet instead of the SDK, which is
         unexpected and discouraged according to Microsoft.Net.Compilers.Toolset's Readme too.
         Fixing the <"error CS8032: An instance of analyzer Microsoft.CodeAnalysis.[...]Analyzer cannot be created from
         [...]\.nuget\packages\microsoft.codeanalysis.csharp.codestyle\4.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.CodeStyle.dll:
         Could not load file or assembly 'Microsoft.CodeAnalysis, Version=4.1.0.0, Culture=neutral,
         PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.."> by
         adding "Microsoft.CodeAnalysis" AND "Microsoft.Net.Compilers" manually; see:
         https://docs.microsoft.com/en-us/answers/questions/244179/microsoftcodeanalysis-problem.html
    <PackageReference Include="Microsoft.CodeAnalysis.Compilers" Version="4.2.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers;</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Net.Compilers.Toolset" Version="4.2.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers;</IncludeAssets>
    </PackageReference>  -->
  </ItemGroup>

  <ItemGroup>
    <AdditionalFiles Include="$(MSBuildThisFileDirectory)stylecop.json" Link="stylecop.json" />
    <AdditionalFiles Include="$(MSBuildThisFileDirectory)SonarLint.xml" Link="SonarLint.xml" />
  </ItemGroup>

  <Target Name="DisableAnalyzers" BeforeTargets="CoreCompile" Condition="'$(RunCodeAnalysis)' == 'false'">
    <ItemGroup>
      <Analyzer Remove="@(Analyzer)" />
    </ItemGroup>
  </Target>

  <!-- This target ensures, that LombiqNetAnalyzers is called during Build as well. This way the LombiqNetAnalyzers
       target can remain independent, and calling it in itself won't trigger any Build-related targets. This target acts
       as a bridge by being dependent on LombiqNetAnalyzers and running after AfterResolveReferences (which is part of
       Build). -->
  <Target Name="CopyEditorconfig" DependsOnTargets="LombiqNetAnalyzers" AfterTargets="AfterResolveReferences">
  </Target>

  <!-- This target should be used in CI before build, e.g. `dotnet msbuild -target:LombiqNetAnalyzers | Out-Null`. Use
       `| Out-Null` in PowerShell or `>/dev/null 2>&1` in bash to suppress output because it will complain if not every
       project has this target, but that's not really relevant. If you are using NuGet, then the argument should be
       "-target:Restore;LombiqNetAnalyzers" (including the quotes) to restore all package dependencies first.
       .editorconfig needs to be copied since this is the only standard way for every editor to be able to use it (until
       extending other .editorconfig files will be possible: https://github.com/editorconfig/editorconfig/issues/236). -->
  <Target Name="LombiqNetAnalyzers">
    <Copy Condition="'$(SolutionDir)' != '*Undefined*'"
          SourceFiles="$(MSBuildThisFileDirectory).editorconfig"
          DestinationFolder="$(SolutionDir)"
          SkipUnchangedFiles="true" />
  </Target>

</Project>
